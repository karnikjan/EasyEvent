{"version":3,"sources":["context/auth-context.js","pages/Auth.js","components/Modal/Modal.js","components/Backdrop/Backdrop.js","components/Events/EventList/EventItem/EventItem.js","components/Events/EventList/EventList.js","components/Spinner/Spinner.js","pages/Events.js","components/Bookings/BookingList/BookingList.js","pages/Bookings.js","components/Navigation/MainNavigation.js","App.js","index.js"],"names":["React","createContext","token","userId","login","tokenExpiration","logout","AuthPage","props","useState","isLogin","setIsLogin","emailEl","useRef","passwordEl","contextType","useContext","AuthContext","className","onSubmit","event","preventDefault","email","current","value","password","trim","length","requestBody","query","variables","fetch","method","body","JSON","stringify","headers","then","res","status","Error","json","resData","data","catch","err","console","log","htmlFor","type","id","ref","onClick","prevState","modal","title","children","canCancel","onCancel","canConfirm","onConfirm","confirmText","backdrop","eventItem","key","eventId","price","Date","date","toLocaleDateString","creatorId","onDetail","bind","eventList","events","map","_id","authUserId","creator","onViewDetail","spinner","Events","creating","setCreating","setEvents","isLoading","setIsLoading","selectedEvent","setSelectedEvent","isActive","useEffect","fetchEvents","titleElRef","priceElRef","dateElRef","descriptionElRef","modalCancelHandler","Fragment","description","updatedEvents","push","createEvent","rows","find","e","bookingList","bookings","booking","createdAt","onDelete","Bookings","setBookings","fetchBookings","fetchedBookings","bookingId","filter","MainNavigation","Consumer","context","to","App","setToken","setUserId","Provider","from","exact","path","component","EventsPage","BookingsPage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.651af569.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nexport default React.createContext({\r\n    token: null,\r\n    userId: null,\r\n    login: (token, userId, tokenExpiration) => {},\r\n    logout: () => {}\r\n});","import React, { useState, useRef, useContext } from 'react';\r\n\r\nimport './Auth.css';\r\nimport AuthContext from '../context/auth-context';\r\n\r\nconst AuthPage = props => {\r\n\r\n    const [isLogin, setIsLogin] = useState(true);\r\n\r\n    const emailEl = useRef();\r\n    const passwordEl = useRef();\r\n\r\n    const contextType = useContext(AuthContext);\r\n\r\n    const switchModeHandler = () => {\r\n        setIsLogin(prevState => !prevState)\r\n    };\r\n\r\n    const submitHandler = event => {\r\n        event.preventDefault();\r\n        const email = emailEl.current.value;\r\n        const password = passwordEl.current.value;\r\n\r\n        if (email.trim().length === 0 || password.trim().length === 0) {\r\n            return;\r\n        }\r\n\r\n        let requestBody = {\r\n            query: `\r\n                query Login($email: String!, $password: String!) {\r\n                    login(email: $email, password: $password) {\r\n                        userId\r\n                        token\r\n                        tokenExpiration\r\n                    }\r\n                }\r\n            `,\r\n            variables: {\r\n                email: email,\r\n                password: password\r\n            }\r\n        };\r\n        if (!isLogin) {\r\n            requestBody = {\r\n                query: `\r\n                    mutation CreateUser($email: String!, $password: String!) {\r\n                        createUser(userInput: {email: $email, password: $password}) {\r\n                            _id\r\n                            email\r\n                        }\r\n                    }\r\n                `,\r\n                variables: {\r\n                    email: email,\r\n                    password: password\r\n                }\r\n            };\r\n        };\r\n\r\n        fetch(\"https://easy-event-app1.herokuapp.com/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => {\r\n            if (res.status !== 200 && res.status !== 201) {\r\n                throw new Error('Failed!');\r\n            }\r\n            return res.json();\r\n        }).then(resData => {\r\n            if (resData.data.login.token) {\r\n                contextType.login(\r\n                    resData.data.login.token,\r\n                    resData.data.login.userId,\r\n                    resData.data.login.tokenExpiration\r\n                );\r\n\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <form className=\"auth-form\" onSubmit={submitHandler}>\r\n            <h1>{isLogin ? 'Login' : 'Sign Up'}</h1>\r\n            <div className=\"form-control\">\r\n                <label htmlFor=\"email\">E-mail</label>\r\n                <input type=\"email\" id=\"email\" ref={emailEl} />\r\n            </div>\r\n\r\n            <div className=\"form-control\">\r\n                <label htmlFor=\"password\">Password</label>\r\n                <input type=\"password\" id=\"password\" ref={passwordEl} />\r\n            </div>\r\n            <div className=\"form-actions\">\r\n                <button type=\"submit\">Submit</button>\r\n                <button type=\"button\" onClick={switchModeHandler}>Switch to {isLogin ? 'Sign Up' : 'Login'}</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nexport default AuthPage;","import React from 'react';\r\n\r\nimport './Modal.css';\r\n\r\nconst modal = props => (\r\n    <div className=\"modal\">\r\n        <header className=\"modal__header\">\r\n            <h1>{props.title}</h1>\r\n        </header>\r\n        <section className=\"modal__content\">\r\n            {props.children}\r\n        </section>\r\n        <section className=\"modal__actions\">\r\n            {props.canCancel && <button className=\"btn\" onClick={props.onCancel}>Cancel</button>}\r\n            {props.canConfirm && <button className=\"btn\" onClick={props.onConfirm}>{props.confirmText}</button>}\r\n        </section>\r\n    </div>\r\n);\r\n\r\n\r\n\r\n\r\nexport default modal;","import React from 'react';\r\n\r\nimport './Backdrop.css';\r\n\r\nconst backdrop = props => <div className=\"backdrop\"></div>;\r\n\r\nexport default backdrop;","import React from 'react';\r\n\r\nimport './EventItem.css';\r\n\r\nconst eventItem = props => (\r\n    <li key={props.eventId} className=\"events__list-item\">\r\n        <div>\r\n            <h1>{props.title}</h1>\r\n            <h2>${props.price} - {new Date(props.date).toLocaleDateString('cz-CZ')}</h2>\r\n        </div>\r\n        <div>\r\n            {\r\n                props.userId === props.creatorId ? \r\n                <p>You're the owner of this event.</p> :\r\n                // .bind prevents the onClick from firing when the JSX code gets rendered! only executes after it is CLICKED! epic\r\n                <button className=\"btn\" onClick={props.onDetail.bind(this, props.eventId)}> \r\n                    View Details\r\n                </button>\r\n            }\r\n        </div>\r\n    </li>\r\n)\r\n\r\nexport default eventItem;","import React from 'react';\r\n\r\nimport EventItem from './EventItem/EventItem.js';\r\nimport './EventList.css';\r\n\r\nconst eventList = props => {\r\n    const events = props.events.map(event => {\r\n        return (\r\n            <EventItem \r\n                key={event._id}\r\n                eventId={event._id}\r\n                title={event.title}\r\n                price={event.price}\r\n                date={event.date}\r\n                userId={props.authUserId}\r\n                creatorId={event.creator._id}\r\n                onDetail={props.onViewDetail}\r\n            />\r\n        );\r\n    });\r\n\r\n    return (\r\n        <ul className=\"event__list\">\r\n            {events}\r\n        </ul>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default eventList;","import React from 'react';\r\n\r\nimport './Spinner.css';\r\n\r\nconst spinner = () => (\r\n    <div className=\"spinner\">\r\n        <div className=\"lds-circle\">\r\n            <div></div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default spinner;","import React, { useState, useRef, useContext, useEffect } from 'react';\r\n\r\nimport Modal from '../components/Modal/Modal.js';\r\nimport Backdrop from '../components/Backdrop/Backdrop.js';\r\nimport AuthContext from '../context/auth-context.js';\r\nimport EventList from '../components/Events/EventList/EventList.js';\r\nimport Spinner from '../components/Spinner/Spinner.js';\r\nimport './Events.css';\r\n\r\nconst Events = () => {\r\n\r\n    const [ creating, setCreating ] = useState(false);\r\n    const [ events, setEvents ] = useState([]);\r\n    const [ isLoading, setIsLoading ] = useState(false);\r\n    const [ selectedEvent, setSelectedEvent ] = useState(null);\r\n    \r\n    let isActive = true;\r\n    useEffect(() => {\r\n        fetchEvents();\r\n\r\n        return function cleanup() {\r\n            isActive = false;\r\n        }\r\n    },[]);\r\n    \r\n    const contextType = useContext(AuthContext);\r\n    const token = contextType.token;\r\n    \r\n    const titleElRef = useRef();\r\n    const priceElRef = useRef();\r\n    const dateElRef = useRef();\r\n    const descriptionElRef = useRef();\r\n\r\n    const startCreatingEventHandler = () => {\r\n        setCreating(true);\r\n    }\r\n\r\n    const modalConfirmHandler = () => {\r\n        setCreating(false);\r\n\r\n        const title = titleElRef.current.value;\r\n        const price = +priceElRef.current.value; // the + converts it to number\r\n        const date = dateElRef.current.value;\r\n        const description = descriptionElRef.current.value;\r\n\r\n        if (\r\n            title.trim().length === 0 ||\r\n            price <= 0 ||\r\n            date.trim().length === 0 ||\r\n            description.trim().length === 0\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        // you can ommit { title: title }, if you want the name the property the same\r\n        const event = { title, price, date, description }\r\n\r\n        const requestBody = {\r\n            query: `\r\n                mutation CreateEvent($title: String!, $description: String!, $price: Float!, $date: String!) {\r\n                    createEvent(eventInput: {title: $title, description: $description, price: $price, date: $date}) {\r\n                        _id\r\n                        title\r\n                        description\r\n                        date\r\n                        price\r\n                    }\r\n                }\r\n            `,\r\n            variables: {\r\n                title: title,\r\n                description: description,\r\n                price: price,\r\n                date: date\r\n            }\r\n        };\r\n\r\n        fetch(\"https://easy-event-app1.herokuapp.com/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + token\r\n            }\r\n        }).then(res => {\r\n            if (res.status !== 200 && res.status !== 201) {\r\n                throw new Error('Failed!');\r\n            }\r\n            return res.json();\r\n        }).then(resData => {\r\n            setEvents(prevState => {\r\n                const updatedEvents = [...prevState];\r\n                updatedEvents.push({\r\n                    _id: resData.data.createEvent._id,\r\n                    title: resData.data.createEvent.title,\r\n                    description: resData.data.createEvent.description,\r\n                    date: resData.data.createEvent.date,\r\n                    price: resData.data.createEvent.price,\r\n                    creator: {\r\n                        _id: contextType.userId\r\n                    }\r\n                });\r\n                return updatedEvents;\r\n            });\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    const modalCancelHandler = () => {\r\n        setCreating(false);\r\n        setSelectedEvent(null);\r\n    };\r\n    const fetchEvents = () => {\r\n        setIsLoading(true);\r\n        const requestBody = {\r\n            query: `\r\n                query {\r\n                    events {\r\n                        _id\r\n                        title\r\n                        description\r\n                        date\r\n                        price\r\n                        creator {\r\n                            _id\r\n                            email\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n        };\r\n\r\n\r\n        fetch(\"https://easy-event-app1.herokuapp.com/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => {\r\n            if (res.status !== 200 && res.status !== 201) {\r\n                throw new Error('Failed!');\r\n            }\r\n            return res.json();\r\n        }).then(resData => {\r\n            const events = resData.data.events;\r\n            if (isActive) {\r\n                setEvents(events);\r\n                setIsLoading(false);\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n            if (isActive) {\r\n                setIsLoading(false);\r\n            }\r\n        });\r\n    };\r\n\r\n    const showDetailHandler = eventId => {\r\n        setSelectedEvent(prevState => {\r\n            const selectedEvent = events.find(e => e._id === eventId)\r\n            return selectedEvent;\r\n        })\r\n    };\r\n\r\n    const bookEventHandler = () => {\r\n        if (!token) {\r\n            setSelectedEvent(null);\r\n            return;\r\n        };\r\n        const requestBody = {\r\n            query: `\r\n                mutation BookEvent($id: ID!) {\r\n                    bookEvent(eventId: $id) {\r\n                        _id\r\n                        createdAt\r\n                        updatedAt\r\n                    }\r\n                }\r\n            `,\r\n            variables: {\r\n                id: selectedEvent._id\r\n            }\r\n        };\r\n\r\n        fetch(\"https://easy-event-app1.herokuapp.com/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + token\r\n            }\r\n        }).then(res => {\r\n            if (res.status !== 200 && res.status !== 201) {\r\n                throw new Error('Failed!');\r\n            }\r\n            return res.json();\r\n        }).then(resData => {\r\n            console.log(resData);\r\n            setSelectedEvent(null);\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {(creating || selectedEvent) && <Backdrop />}\r\n            {creating && (\r\n                <Modal \r\n                    title=\"Add Event\"\r\n                    canCancel\r\n                    canConfirm\r\n                    onCancel={modalCancelHandler}\r\n                    onConfirm={modalConfirmHandler}\r\n                    confirmText=\"Confirm\"\r\n                >\r\n                    <form>\r\n                        <div className=\"form-control\">\r\n                            <label htmlFor=\"title\">Title</label>\r\n                            <input type=\"text\" id=\"title\" ref={titleElRef} />\r\n                        </div>\r\n                        <div className=\"form-control\">\r\n                            <label htmlFor=\"price\">Price</label>\r\n                            <input type=\"number\" id=\"price\" ref={priceElRef} />\r\n                        </div>\r\n                        <div className=\"form-control\">\r\n                            <label htmlFor=\"date\">Date</label>\r\n                            <input type=\"datetime-local\" id=\"date\" ref={dateElRef} />\r\n                        </div>\r\n                        <div className=\"form-control\">\r\n                            <label htmlFor=\"description\">Description</label>\r\n                            <textarea id=\"description\" rows=\"4\" ref={descriptionElRef} />\r\n                        </div>\r\n                    </form>\r\n                </Modal>)\r\n            }\r\n            {selectedEvent && (\r\n                <Modal \r\n                    title={selectedEvent.title}\r\n                    canCancel\r\n                    canConfirm\r\n                    onCancel={modalCancelHandler}\r\n                    onConfirm={bookEventHandler}\r\n                    confirmText={contextType.token ? 'Book' : 'Confirm'}\r\n                >\r\n                    <h1>{selectedEvent.title}</h1>\r\n                    <h2>\r\n                        ${selectedEvent.price} - {new Date(selectedEvent.date).toLocaleDateString('cz-CZ')}\r\n                    </h2>\r\n                    <p>\r\n                        {selectedEvent.description}\r\n                    </p>\r\n                </Modal>\r\n            )\r\n            }\r\n            {contextType.token &&\r\n                <div className=\"events-control\">\r\n                    <p>Share your own Events!</p>\r\n                    <button className=\"btn\" onClick={startCreatingEventHandler}>\r\n                        Create Event\r\n                </button>\r\n                </div>\r\n            }\r\n            {\r\n                isLoading ? \r\n                <Spinner /> : \r\n                <EventList \r\n                    events={events} \r\n                    authUserId={contextType.userId} \r\n                    onViewDetail={showDetailHandler}    \r\n                />\r\n            }\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Events;","import React from 'react';\r\n\r\nimport './BookingList.css';\r\n\r\nconst bookingList = props => (\r\n    <ul className=\"bookings__list\">\r\n        {props.bookings.map(booking => {\r\n            return (\r\n                <li key={booking._id} className=\"bookings__item\">\r\n                    <div className=\"bookings__item-data\">\r\n                        {booking.event.title} - {' '} \r\n                        {new Date(booking.createdAt).toLocaleDateString()}\r\n                    </div>\r\n                    <div className=\"bookings__item-actions\">\r\n                        <button className=\"btn\" onClick={props.onDelete.bind(this, booking._id)}>\r\n                            Cancel\r\n                        </button>\r\n                    </div>\r\n                </li>\r\n            );\r\n        })}\r\n    </ul>\r\n)\r\n\r\n\r\nexport default bookingList;\r\n","import React, { useEffect, useState, useContext } from 'react';\r\n\r\nimport BookingList from '../components/Bookings/BookingList/BookingList.js';\r\nimport AuthContext from '../context/auth-context.js';\r\nimport Spinner from '../components/Spinner/Spinner.js';\r\n\r\nconst Bookings = () => {\r\n\r\n    const [ isLoading, setIsLoading ] = useState(false);\r\n    const [ bookings, setBookings ] = useState([]);\r\n\r\n    const contextType = useContext(AuthContext);\r\n\r\n    useEffect(() => {\r\n        fetchBookings();\r\n    },[])\r\n\r\n    const fetchBookings = () => {\r\n        setIsLoading(true);\r\n        const requestBody = {\r\n            query: `\r\n                query {\r\n                    bookings {\r\n                        _id\r\n                        createdAt\r\n                        event {\r\n                            _id\r\n                            title\r\n                            date\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n        };\r\n\r\n\r\n        fetch(\"https://easy-event-app1.herokuapp.com/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + contextType.token\r\n            }\r\n        })\r\n        .then(res => {\r\n            if (res.status !== 200 && res.status !== 201) {\r\n                throw new Error('Failed!');\r\n            }\r\n            return res.json();\r\n        })\r\n        .then(resData => {\r\n            const fetchedBookings = resData.data.bookings;\r\n            setBookings(fetchedBookings);\r\n            setIsLoading(false);\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            setIsLoading(false);\r\n        });\r\n    }\r\n\r\n    const deleteBookingHandler = bookingId => {\r\n        setIsLoading(true);\r\n        const requestBody = {\r\n            query: `\r\n                mutation CancelBooking($id: ID!) {\r\n                    cancelBooking(bookingId: $id) {\r\n                        _id\r\n                        title\r\n                    }\r\n                }\r\n            `,\r\n            variables: {\r\n                id: bookingId\r\n            }\r\n        };\r\n\r\n\r\n        fetch(\"https://easy-event-app1.herokuapp.com/graphql\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + contextType.token\r\n            }\r\n        })\r\n        .then(res => {\r\n            if (res.status !== 200 && res.status !== 201) {\r\n                throw new Error('Failed!');\r\n            }\r\n            return res.json();\r\n        })\r\n        .then(resData => {\r\n            setBookings(prevState => {\r\n                const updatedBookings = prevState.filter(booking => {\r\n                    return booking._id !== bookingId;\r\n                });\r\n                return updatedBookings;\r\n            });\r\n            setIsLoading(false);\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            setIsLoading(false);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                isLoading ? \r\n                <Spinner /> :\r\n                <BookingList bookings={bookings} onDelete={deleteBookingHandler} />\r\n            }\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Bookings;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport AuthContext from '../../context/auth-context.js';\r\nimport './MainNavigation.css';\r\n\r\n\r\nconst MainNavigation = props => (\r\n    <AuthContext.Consumer>\r\n        {context => {\r\n            return (\r\n                <header className=\"main-navigation\">\r\n                    <div className=\"main-navigation__logo\">\r\n                        <h1>EasyEvent</h1>\r\n                    </div>\r\n                    <nav className=\"main-navigation__items\">\r\n                        <ul>\r\n                            {!context.token && (\r\n                                <li>\r\n                                    <NavLink to=\"/auth\">Authenticate</NavLink>\r\n                                </li>\r\n                            )}\r\n                            <li>\r\n                                <NavLink to=\"/events\">Events</NavLink>\r\n                            </li>\r\n                            {context.token && (\r\n                                <React.Fragment>\r\n                                    <li>\r\n                                        <NavLink to=\"/bookings\">Bookings</NavLink>\r\n                                    </li>\r\n                                    <li>\r\n                                        <button onClick={context.logout}>Logout</button>\r\n                                    </li>\r\n                                </React.Fragment>\r\n                            )}\r\n                        </ul>\r\n                    </nav>\r\n                </header>\r\n            )\r\n        }}\r\n    </AuthContext.Consumer>\r\n);\r\n\r\nexport default MainNavigation;","import React, { useState } from 'react';\r\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom';\r\n\r\nimport AuthPage from './pages/Auth.js';\r\nimport EventsPage from './pages/Events.js';\r\nimport BookingsPage from './pages/Bookings.js';\r\nimport MainNavigation from './components/Navigation/MainNavigation.js';\r\nimport AuthContext from './context/auth-context.js';\r\n\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n\r\n  const [token, setToken] = useState(null);\r\n  const [userId, setUserId] = useState(null);\r\n\r\n  const login = (token, userId, tokenExpiration) => {\r\n    setToken(token);\r\n    setUserId(userId);\r\n  }\r\n\r\n  const logout = () => {\r\n    setToken(null);\r\n    setUserId(null);\r\n  }\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <AuthContext.Provider value={{ token: token, userId: userId, login: login, logout: logout }}>\r\n        <MainNavigation />\r\n        <main className=\"main-content\">\r\n          <Switch>\r\n            {token && <Redirect from=\"/\" to=\"/events\" exact />}\r\n            {token && <Redirect from=\"/auth\" to=\"/events\" exact />}\r\n            {!token && (\r\n              <Route path=\"/auth\" component={AuthPage} />\r\n              )}\r\n            <Route path=\"/events\" component={EventsPage} />\r\n            {token && (\r\n              <Route path=\"/bookings\" component={BookingsPage} />\r\n            )}\r\n            {!token && <Redirect to=\"/auth\" exact />}\r\n          </Switch>\r\n        </main>\r\n      </AuthContext.Provider>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}